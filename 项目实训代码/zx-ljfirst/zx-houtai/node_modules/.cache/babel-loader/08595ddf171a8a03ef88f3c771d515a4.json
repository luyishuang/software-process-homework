{"ast":null,"code":"var _jsxFileName = \"E:\\\\\\u5927\\u4E09\\\\\\u5927\\u4E09\\u4E0A\\\\\\u79FB\\u52A8web\\u5F00\\u53D1\\\\myapp\\\\src\\\\ToDolist\\\\Todolist.js\";\nimport React, { Component } from 'react';\nimport Todoinput from './Todoinput';\nimport Todoing from './Todoing';\nimport './todo.css';\nexport default class Todolist extends Component {\n  constructor() {\n    super();\n\n    this.addItem = data => {\n      // this.state.todo.push(data); 不行！   不要对状态做出任何处理\n      // console.log(data);\n      // console.log(this.state.todo);\n      this.setState({\n        todo: [...this.state.todo, data]\n      }, () => {\n        localStorage.setItem('', JSON.stringify(this.state.todo));\n      });\n    };\n\n    this.delItem = idx => {\n      //1、不能直接改变或处理state，通过setState改变\n      // let todo = [...this.state.todo];\n      // todo.splice(idx,1);\n      //2、setState是异步执行\n      this.setState((state, props) => {\n        //state是为了拿到前一个值\n        console.log(state.todo);\n        return {\n          todo: state.todo.filter((item, index) => idx !== index)\n        };\n      }); //在setState里获取state可能会出错，不是一开始想要得到的值\n      //可以像上面那样，把第一个参数写成state\n      // this.setState({\n      //     todo:this.state.num +100\n      // },()=>{//callback函数 拿到的值是最新的\n      //     console.log(this.state.todo);\n      // })\n    };\n\n    this.state = {\n      todo: [1, 2, 3],\n      a: 100,\n      b: 200\n    }; //深拷贝\\浅拷贝\n    // var obj = {a:100,b:[1,2,3]};\n    // var obj1 = {c:300};\n    //var o = {...obj};//obj的时候是100  {...obj}的时候是200\n    //var o = Object.assign(obj,obj1);//将obj1整合到obj上!!!!!!!!!!!\n    //var o = JSON.parse(JSON.stringify(obj));//直接转换成一个普通的字符串 然后再转化为对象  属于深拷贝\n    //o.a = 200;\n    //o.b[0] = 200;//属于浅拷贝\n    // console.log(obj===o);\n    // console.log(Object.keys(obj));//obj的属性名组成的数组\n    // Object.keys(obj).forEach((item)=>{\n    //     console.log(item);\n    //     console.log(obj[item]);\n    // })\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, React.createElement(Todoinput, {\n      add: this.addItem,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }), React.createElement(Todoing, {\n      del: this.delItem,\n      todo: this.state.todo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["E:\\大三\\大三上\\移动web开发\\myapp\\src\\ToDolist\\Todolist.js"],"names":["React","Component","Todoinput","Todoing","Todolist","constructor","addItem","data","setState","todo","state","localStorage","setItem","JSON","stringify","delItem","idx","props","console","log","filter","item","index","a","b","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAO,YAAP;AAEA,eAAe,MAAMC,QAAN,SAAuBH,SAAvB,CAAiC;AAC5CI,EAAAA,WAAW,GAAE;AACT;;AADS,SAwBbC,OAxBa,GAwBFC,IAAD,IAAU;AAChB;AACA;AACA;AACA,WAAKC,QAAL,CAAc;AACVC,QAAAA,IAAI,EAAC,CAAC,GAAG,KAAKC,KAAL,CAAWD,IAAf,EAAoBF,IAApB;AADK,OAAd,EAEE,MAAI;AACFI,QAAAA,YAAY,CAACC,OAAb,CAAqB,EAArB,EAAwBC,IAAI,CAACC,SAAL,CAAe,KAAKJ,KAAL,CAAWD,IAA1B,CAAxB;AACH,OAJD;AAKH,KAjCY;;AAAA,SAkCbM,OAlCa,GAkCFC,GAAD,IAAS;AACf;AACA;AACA;AACA;AACA,WAAKR,QAAL,CAAc,CAACE,KAAD,EAAOO,KAAP,KAAe;AAAC;AAC1BC,QAAAA,OAAO,CAACC,GAAR,CAAYT,KAAK,CAACD,IAAlB;AACA,eAAO;AACHA,UAAAA,IAAI,EAACC,KAAK,CAACD,IAAN,CAAWW,MAAX,CAAkB,CAACC,IAAD,EAAMC,KAAN,KAAcN,GAAG,KAAGM,KAAtC;AADF,SAAP;AAGH,OALD,EALe,CAWf;AACA;AAEA;AACA;AACA;AACA;AACA;AACH,KArDY;;AAET,SAAKZ,KAAL,GAAa;AACTD,MAAAA,IAAI,EAAC,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,CADI;AAETc,MAAAA,CAAC,EAAC,GAFO;AAGTC,MAAAA,CAAC,EAAC;AAHO,KAAb,CAFS,CAST;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH;;AA+BDC,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,SAAD;AAAW,MAAA,GAAG,EAAE,KAAKnB,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,OAAD;AAAS,MAAA,GAAG,EAAE,KAAKS,OAAnB;AAA4B,MAAA,IAAI,EAAE,KAAKL,KAAL,CAAWD,IAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ;AAMH;;AA9D2C","sourcesContent":["import React, { Component } from 'react'\r\nimport Todoinput from './Todoinput'\r\nimport Todoing from './Todoing'\r\nimport './todo.css'\r\n\r\nexport default class Todolist extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            todo:[1,2,3],\r\n            a:100,\r\n            b:200\r\n        }\r\n\r\n\r\n        //深拷贝\\浅拷贝\r\n        // var obj = {a:100,b:[1,2,3]};\r\n        // var obj1 = {c:300};\r\n        //var o = {...obj};//obj的时候是100  {...obj}的时候是200\r\n        //var o = Object.assign(obj,obj1);//将obj1整合到obj上!!!!!!!!!!!\r\n        //var o = JSON.parse(JSON.stringify(obj));//直接转换成一个普通的字符串 然后再转化为对象  属于深拷贝\r\n        //o.a = 200;\r\n        //o.b[0] = 200;//属于浅拷贝\r\n        // console.log(obj===o);\r\n        // console.log(Object.keys(obj));//obj的属性名组成的数组\r\n        // Object.keys(obj).forEach((item)=>{\r\n        //     console.log(item);\r\n        //     console.log(obj[item]);\r\n        // })\r\n    }\r\n    addItem = (data) => {\r\n        // this.state.todo.push(data); 不行！   不要对状态做出任何处理\r\n        // console.log(data);\r\n        // console.log(this.state.todo);\r\n        this.setState({\r\n            todo:[...this.state.todo,data]\r\n        },()=>{\r\n            localStorage.setItem('',JSON.stringify(this.state.todo))\r\n        })\r\n    }\r\n    delItem = (idx) => {\r\n        //1、不能直接改变或处理state，通过setState改变\r\n        // let todo = [...this.state.todo];\r\n        // todo.splice(idx,1);\r\n        //2、setState是异步执行\r\n        this.setState((state,props)=>{//state是为了拿到前一个值\r\n            console.log(state.todo);\r\n            return {\r\n                todo:state.todo.filter((item,index)=>idx!==index)\r\n            }\r\n        })\r\n        //在setState里获取state可能会出错，不是一开始想要得到的值\r\n        //可以像上面那样，把第一个参数写成state\r\n\r\n        // this.setState({\r\n        //     todo:this.state.num +100\r\n        // },()=>{//callback函数 拿到的值是最新的\r\n        //     console.log(this.state.todo);\r\n        // })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Todoinput add={this.addItem}/>\r\n                <Todoing del={this.delItem} todo={this.state.todo}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}