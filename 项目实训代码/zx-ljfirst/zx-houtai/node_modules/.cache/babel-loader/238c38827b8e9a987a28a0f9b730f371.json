{"ast":null,"code":"var _jsxFileName = \"E:\\\\\\u5927\\u4E09\\\\\\u5927\\u4E09\\u4E0A\\\\\\u79FB\\u52A8web\\u5F00\\u53D1\\\\myapp\\\\src\\\\index.js\";\nimport React, { Fragment, Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { ShowTime } from './ShowTime';\nimport App from './App';\nimport Todolist from './ToDolist/Todolist';\nimport Request from './Request';\nimport Parent from './Context/Parent';\nimport { con, con2 } from './Context/Context';\nimport Hoc from './Hoc/Hoc';\nimport ParentProtal from './Protal/ParentProtal';\nimport ToDoList from './Todo/ToDoList'; // import Todo from './To/Todo';\n// ReactDOM.render(<App/>,document.getElementById('root'))\n// let {Provider,Consumer} = React.createContext();\n//Context：\n//1、生成Context。可写在一个js文件中，export导出\n//2、在根组件上配置Provider，加上value属性\n//3、在需要获取数据的组件，import Consumer并配置consumer\n//Consumer组件里是个函数，函数的参数是传过来的value值\n\nlet id = 1234;\nReactDOM.render(React.createElement(con.Provider, {\n  value: id,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 33\n  },\n  __self: this\n}, React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 34\n  },\n  __self: this\n}, \"ddd\"), React.createElement(con2.Provider, {\n  value: \"aaa\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 35\n  },\n  __self: this\n}, React.createElement(Parent, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 36\n  },\n  __self: this\n}))), document.getElementById('root')); //引用的文件如果是js文件不用加后缀名，剩下的都要加后缀名\n//import导入文件\n// function ShowTime(props){\n//     console.log(props);\n//     return (<React.Fragment>\n//                 <div>{props.name}</div>\n//                 <div>{new Date().toLocaleString()}</div>\n//             </React.Fragment>)\n// }\n//用类的方式声明一个组件\n// 组件交互\n// 父组件 ->  子组件：调用子组件时添加属性，子组件通过props拿到传递的数据\n// 子组件 ->  父组件：\n// ReactDOM.render(<Request />,document.getElementById('root'))\n// var num = [1,2,3,4,5];\n// ReactDOM.render(\n//     <ShowTime name=\"zhangsan\" age={num}/>,\n//     document.getElementById(\"root\")\n// )\n// 显示当前系统时间\n// function showTime(){\n//     var ele = <div>{new Date().toLocaleString()}</div>;\n//     ReactDOM.render(\n//         ele,\n//         document.querySelector('#root')\n//     );\n// };\n// showTime();\n// setInterval(showTime,1000);\n// var str = 'react'\n// var obj = {\n//     type:'div',\n//     props:{\n//         id:'tit',\n//         class:'tit',\n//         children:[\n//             'hello',\n//             'w',\n//             'orld',\n//             {\n//                 type:'h1',\n//                 props:{\n//                     id:'tit',\n//                     class:'tit',\n//                     children:[\n//                         'hello',\n//                         'w',\n//                         'orld'\n//                     ]\n//                 }\n//             }\n//         ]\n//     }\n// }\n// function render(obj,container){\n//     var {type,props} = obj;\n//     //文档碎片\n//     var fragment = document.createDocumentFragment();//不用传参\n//     var ele = document.createElement(type);\n//     for(var item in props){\n//         if(item === 'class'){\n//             ele.className = props[item];\n//         }else if(item === 'children'){\n//             for(var i=0;i<props[item].length;i++){\n//                 if(typeof props.children[i] === 'object'){\n//                     render(props.children[i],ele);\n//                 }else{\n//                     // ele.innerHTML += props.children[i];\n//                     var txt = document.createTextNode(props.children[i]);\n//                     ele.appendChild(txt);\n//                 }\n//             }\n//         }\n//         else{\n//             ele[item] = props[item];\n//         }\n//     }\n//     fragment.appendChild(ele);\n//     container.appendChild(fragment);\n// }\n// render(obj,document.getElementById('root'));\n//页面渲染过程\n// 请求HTML页面，浏览器HTML解析器解析html文件，生成DOM树\n// link引入css文件、css解析器解析css，生成css对象模型，CSSOM和DOM树结合生成一个render tree，最后浏览器\n//页面回流（重排reflow）:DOM结构变化，内容变化，大小、位置的变化都会引起页面回流\n//页面重绘（repaint）:颜色的变化（背景色、字体颜色、边框颜色）\n//1、先用变量进行DOM处理，最后一次渲染\n\n/*\nconsole.time('time');\nvar div = document.getElementById('root')\nvar str = ''\nfor(var i=0;i<1000;i++){\n    str += '<p>'+i+'</p>';\n\n}\ndiv.innerHTML = str;\nconsole.timeEnd('time');\n*/\n//2、对于样式的处理,声明一个css类\n// var div = document.getElementById('root');\n// div.style.width = '100px';\n// div.style.height = '100px';\n// div.style.background = 'red';\n// div.className = 'active';\n//3、offsetLeft、offsetWidth等都会引起回流\n// console.log(div.offsetLeft);\n// var wid = div.offsetWidth;\n// setInterval(()=>{\n//     wid += 1;\n//     div.style.width = wid  + 'px';\n// },100)\n// 4、文档碎片（内存中的一个变量）\n//var ele = <h1 class=\"tit\">hello {obj}</h1>;   //JSX表达式\n//babel编译 返回对象\n//var ele = React.createElement('h1',{id:'tit',class:'title'},\"hello\",React.createElement('p',{id:'t',class:'tit'},\"react\"));\n// console.log(ele);\n// ReactDOM.render(ele, document.getElementById('root'));","map":{"version":3,"sources":["E:\\大三\\大三上\\移动web开发\\myapp\\src\\index.js"],"names":["React","Fragment","Component","ReactDOM","ShowTime","App","Todolist","Request","Parent","con","con2","Hoc","ParentProtal","ToDoList","id","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,SAAvB,QAAuC,OAAvC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,SAAQC,QAAR,QAAuB,YAAvB;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,SAAQC,GAAR,EAAYC,IAAZ,QAAuB,mBAAvB;AACA,OAAOC,GAAP,MAAgB,WAAhB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,QAAP,MAAqB,iBAArB,C,CACA;AAIA;AAOA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,EAAE,GAAG,IAAT;AACAX,QAAQ,CAACY,MAAT,CACI,oBAAC,GAAD,CAAK,QAAL;AAAc,EAAA,KAAK,EAAED,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADJ,EAEI,oBAAC,IAAD,CAAM,QAAN;AAAe,EAAA,KAAK,EAAC,KAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADJ,CAFJ,CADJ,EAOIE,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAPJ,E,CAUA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AACA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA","sourcesContent":["import React,{Fragment,Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {ShowTime} from './ShowTime';\nimport App from './App';\nimport Todolist from './ToDolist/Todolist';\nimport Request from './Request';\nimport Parent from './Context/Parent'\nimport {con,con2} from './Context/Context'\nimport Hoc from './Hoc/Hoc';\nimport ParentProtal from './Protal/ParentProtal';\nimport ToDoList from './Todo/ToDoList';\n// import Todo from './To/Todo';\n\n\n\n// ReactDOM.render(<App/>,document.getElementById('root'))\n\n\n\n\n\n\n// let {Provider,Consumer} = React.createContext();\n//Context：\n//1、生成Context。可写在一个js文件中，export导出\n//2、在根组件上配置Provider，加上value属性\n//3、在需要获取数据的组件，import Consumer并配置consumer\n//Consumer组件里是个函数，函数的参数是传过来的value值\n\nlet id = 1234;\nReactDOM.render(\n    <con.Provider value={id}>\n        <div>ddd</div>\n        <con2.Provider value=\"aaa\">\n            <Parent/>\n        </con2.Provider>\n    </con.Provider>,\n    document.getElementById('root')\n)\n\n//引用的文件如果是js文件不用加后缀名，剩下的都要加后缀名\n//import导入文件\n\n\n// function ShowTime(props){\n//     console.log(props);\n//     return (<React.Fragment>\n//                 <div>{props.name}</div>\n//                 <div>{new Date().toLocaleString()}</div>\n//             </React.Fragment>)\n// }\n\n//用类的方式声明一个组件\n\n\n// 组件交互\n// 父组件 ->  子组件：调用子组件时添加属性，子组件通过props拿到传递的数据\n// 子组件 ->  父组件：\n// ReactDOM.render(<Request />,document.getElementById('root'))\n\n\n\n\n\n// var num = [1,2,3,4,5];\n// ReactDOM.render(\n//     <ShowTime name=\"zhangsan\" age={num}/>,\n//     document.getElementById(\"root\")\n// )\n\n\n\n// 显示当前系统时间\n// function showTime(){\n//     var ele = <div>{new Date().toLocaleString()}</div>;\n//     ReactDOM.render(\n//         ele,\n//         document.querySelector('#root')\n//     );\n// };\n// showTime();\n// setInterval(showTime,1000);\n\n\n\n\n\n// var str = 'react'\n\n// var obj = {\n//     type:'div',\n//     props:{\n//         id:'tit',\n//         class:'tit',\n//         children:[\n//             'hello',\n//             'w',\n//             'orld',\n//             {\n//                 type:'h1',\n//                 props:{\n//                     id:'tit',\n//                     class:'tit',\n//                     children:[\n//                         'hello',\n//                         'w',\n//                         'orld'\n//                     ]\n//                 }\n//             }\n//         ]\n//     }\n// }\n\n// function render(obj,container){\n//     var {type,props} = obj;\n//     //文档碎片\n//     var fragment = document.createDocumentFragment();//不用传参\n\n//     var ele = document.createElement(type);\n//     for(var item in props){\n//         if(item === 'class'){\n//             ele.className = props[item];\n//         }else if(item === 'children'){\n//             for(var i=0;i<props[item].length;i++){\n//                 if(typeof props.children[i] === 'object'){\n//                     render(props.children[i],ele);\n//                 }else{\n//                     // ele.innerHTML += props.children[i];\n//                     var txt = document.createTextNode(props.children[i]);\n//                     ele.appendChild(txt);\n//                 }\n//             }\n//         }\n//         else{\n//             ele[item] = props[item];\n//         }\n//     }\n//     fragment.appendChild(ele);\n//     container.appendChild(fragment);\n// }\n// render(obj,document.getElementById('root'));\n//页面渲染过程\n// 请求HTML页面，浏览器HTML解析器解析html文件，生成DOM树\n// link引入css文件、css解析器解析css，生成css对象模型，CSSOM和DOM树结合生成一个render tree，最后浏览器\n\n//页面回流（重排reflow）:DOM结构变化，内容变化，大小、位置的变化都会引起页面回流\n//页面重绘（repaint）:颜色的变化（背景色、字体颜色、边框颜色）\n\n//1、先用变量进行DOM处理，最后一次渲染\n/*\nconsole.time('time');\nvar div = document.getElementById('root')\nvar str = ''\nfor(var i=0;i<1000;i++){\n    str += '<p>'+i+'</p>';\n\n}\ndiv.innerHTML = str;\nconsole.timeEnd('time');\n*/\n//2、对于样式的处理,声明一个css类\n// var div = document.getElementById('root');\n// div.style.width = '100px';\n// div.style.height = '100px';\n// div.style.background = 'red';\n// div.className = 'active';\n//3、offsetLeft、offsetWidth等都会引起回流\n// console.log(div.offsetLeft);\n// var wid = div.offsetWidth;\n// setInterval(()=>{\n//     wid += 1;\n//     div.style.width = wid  + 'px';\n// },100)\n// 4、文档碎片（内存中的一个变量）\n\n\n//var ele = <h1 class=\"tit\">hello {obj}</h1>;   //JSX表达式\n\n//babel编译 返回对象\n//var ele = React.createElement('h1',{id:'tit',class:'title'},\"hello\",React.createElement('p',{id:'t',class:'tit'},\"react\"));\n// console.log(ele);\n// ReactDOM.render(ele, document.getElementById('root'));\n\n"]},"metadata":{},"sourceType":"module"}